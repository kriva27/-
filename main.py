# Coded by Kriva


from inline_keyboards import main_keyboards, confirm, close_message, back
import speedtest
import os
import tempfile
import time
from PIL import ImageGrab
from config import TOKEN
import telebot
import requests
import platform
import psutil
import socket





bot = telebot.TeleBot(TOKEN)



""""–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
def check_ineternet_connection(call):

    con = requests.get('https://www.google.com')

    if con.status_code == 200:
        sticker = bot.send_sticker(call.message.chat.id,
                                   sticker='CAACAgEAAxkBAAEI3QRkVOP3WcGZvr2VYnGlenSsEtfZ9wACLQIAAqcjIUQ9QDDJ7YO0ti8E')
        mes = bot.send_message(call.message.chat.id, '<b>–ü–æ–¥–ª—é—á–∞—é—Å—å –∫ —Å–µ—Ç–∏ –ø–∫...</b>', parse_mode='HTML',
                               reply_markup=back)
        time.sleep(3)
        mes_2 = bot.send_message(call.message.chat.id, '<b> –í—ã—á–∏—Å–ª—è—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...</b>',
                                           parse_mode='HTML', reply_markup=back)
        time.sleep(3)
        hostname = socket.gethostname()
        ip_address = socket.gethostbyname(hostname)
        servers = []
        threads = None
        s = speedtest.Speedtest()
        s.get_servers(servers)
        s.download(threads=threads)
        results_dict = s.results.dict()
        download_speed = round(results_dict["download"] / 1000000, 2)
        bot.delete_message(call.message.chat.id, sticker.message_id)
        bot.delete_message(call.message.chat.id, mes.message_id)
        bot.delete_message(call.message.chat.id, mes_2.message_id)

        bot.send_message(call.message.chat.id, '<b><i>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</i></b>\n<b><i>‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: </i></b>'+(str(download_speed))+' –ú–±'+'\n<b><i>üìåIp-–ê–¥—Ä–µ—Å: </i></b>'+(str(ip_address)), parse_mode='HTML', reply_markup=back)
    else:
        bot.send_message(call.message.chat.id, '<b><i>‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i></b>', reply_markup=back, parse_mode='HTML')




"""–°–±–æ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∫"""
def computer(call):
    system = (str(platform.system()))
    processor = (str(platform.processor()))
    architecture = (str(platform.architecture()))
    memory = psutil.virtual_memory().total
    memory_gb = round(memory / 1024 ** 3, 2)
    bot.send_message(call.message.chat.id, '<b><i>üñ• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö.\n\n‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: </i></b>'+ (str(system))+ '<b><i>\nüéõ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: </i></b>'+ (str(processor))+ '\n<b><i>üì¶ –û–±—ä–µ–º –û–ü: </i></b>'+(str(memory_gb))+'–ì–ë\n<b><i>üíª –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: </i></b>'+(str(architecture)), parse_mode='HTML',
                     reply_markup=back)



"""–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç"""
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, '<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</b>', reply_markup=main_keyboards, parse_mode='HTML')




"""–û—Ç–≤–µ—Ç—ã –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "off":
        bot.send_message(call.message.chat.id, '<i><b>‚ùóÔ∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –ø–∫?</b></i>', reply_markup=confirm, parse_mode='HTML')
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == 'yes':
        bot.send_message(call.message.chat.id, '‚è≥ –í—ã–∫–ª—é—á–∞—é –ø–∫..')
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, '<i><b>‚ùó Ô∏è–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω. \n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å</b></i>', parse_mode='HTML')
        os.system('shutdown -s')
    elif call.data == 'screen':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        path = tempfile.gettempdir() + 'screenshot.png'
        screenshot = ImageGrab.grab()
        screenshot.save(path, 'PNG')
        bot.send_photo(call.message.chat.id, open(path, 'rb'), caption='<b>–°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞.</b>', parse_mode='HTML', reply_markup=back)
    elif call.data == 'info':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        check_ineternet_connection(call)
    elif call.data == 'back':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, '<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</b>', reply_markup=main_keyboards, parse_mode='HTML')
    elif call.data == 'again':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        check_ineternet_connection(call)
    elif call.data == 'zelezo':
        computer(call)
    elif call.data == 'back_2':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, '<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</b>', reply_markup=main_keyboards, parse_mode='HTML')





bot.polling(none_stop=True)

